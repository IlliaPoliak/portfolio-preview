{"version":3,"sources":["components/common/BackBtn/BackBtn.jsx","components/common/BackBtn/BackBtn.module.css","components/Works/Todo/TodoInput/TodoInput.module.css","components/Works/Todo/TodoList/TodoList.module.css","components/Works/Todo/TodoFooter/TodoFooter.module.css","components/Works/Todo/TodoHeader/TodoHeader.module.css","components/Works/Todo/Todo.module.css","components/Works/Todo/TodoInput/TodoInput.jsx","components/Works/Todo/TodoItem/TodoItem.jsx","components/Works/Todo/TodoList/TodoList.jsx","components/Works/Todo/TodoFooter/TodoFooter.jsx","components/Works/Todo/TodoHeader/TodoHeader.jsx","components/Works/Todo/Todo.jsx"],"names":["connect","state","darkMode","app","className","styles","backBtnWrapper","onClick","window","history","back","backBtn","darkModeStyle","module","exports","ToDoInput","value","onChange","onKeyPress","inputWrapper","autoFocus","input","placeholder","ToDoItem","editMode","changeEditMode","setState","updateTask","id","e","newTaskText","currentTarget","length","key","type","props","taskText","this","text","isCompleted","deleteTask","completeTask","displayElement","defaultValue","onBlur","onDoubleClick","Component","tasks","ToDoList","todoList","map","FILTERS_BTN","Footer","activeFilter","changeFilter","header","btnGroup","filterBtn","active","Header","checked","handleCheckAll","checkAllTasks","uncheckAllTasks","call","amount","all_tasks","deleteCompleted","info","allTasks","activeTasks","completedTasks","clearCompleted","ToDo","handleInputChange","target","addTask","Date","getTime","filterTasks","filter","task","getCompletedTasksCounter","filteredTasks","taskCounter","todoBlock","todoWrapper","BackBtn"],"mappings":"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","file":"static/js/6.1cc4c534.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './BackBtn.module.css'\nimport { connect } from 'react-redux';\n\nconst BackBtn = ({ darkMode }) => <div className={styles.backBtnWrapper} onClick={() => window.history.back()}>\n    <div className={darkMode ? styles.backBtn : `${styles.backBtn} ${styles.darkModeStyle}`}>\n        <span>&#10144;</span>&nbsp;Go back\n    </div>\n</div>\n\nexport default connect(state => ({\n    darkMode: state.app.darkMode\n}), {})(BackBtn)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backBtnWrapper\":\"BackBtn_backBtnWrapper__7wkgF\",\"backBtn\":\"BackBtn_backBtn__256f_\",\"darkModeStyle\":\"BackBtn_darkModeStyle__1x3h1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"TodoInput_input__gcUnk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__3IM9a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"TodoFooter_footer__1ZVeV\",\"btnGroup\":\"TodoFooter_btnGroup__3uDwS\",\"filterBtn\":\"TodoFooter_filterBtn__3simj\",\"active\":\"TodoFooter_active__2wBSz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"TodoHeader_header__zK0SL\",\"info\":\"TodoHeader_info__27hJC\",\"allTasks\":\"TodoHeader_allTasks__2lQ-W\",\"activeTasks\":\"TodoHeader_activeTasks__1Mum5\",\"completedTasks\":\"TodoHeader_completedTasks__2LvGZ\",\"checkAll\":\"TodoHeader_checkAll__1NFcn\",\"checkAllCheckbox\":\"TodoHeader_checkAllCheckbox__3mpDk\",\"clearCompleted\":\"TodoHeader_clearCompleted__2ObG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoBlock\":\"Todo_todoBlock__1S5DL\",\"todoWrapper\":\"Todo_todoWrapper__ahjD8\"};","import React from 'react';\r\nimport styles from './TodoInput.module.css';\r\n\r\nconst ToDoInput = ({ value, onChange, onKeyPress }) => (\r\n   <div className={styles.inputWrapper}>\r\n       <input \r\n            autoFocus\r\n            className={styles.input}\r\n            placeholder='New task'\r\n            onChange={onChange}\r\n            onKeyPress={onKeyPress}\r\n            value={value}\r\n       />\r\n   </div>\r\n);\r\n\r\nexport default ToDoInput;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { connect } from 'react-redux';\r\nimport { updateTask } from '../../../../store/reducers/tasks';\r\n\r\nclass ToDoItem extends Component {\r\n    state = {\r\n        editMode: false\r\n    }\r\n\r\n    changeEditMode = () => {\r\n        this.setState({\r\n            editMode: !this.state.editMode\r\n        })\r\n    }\r\n\r\n    updateTask = (id, e) => {\r\n        const newTaskText = e.currentTarget.value;\r\n\r\n        if ((newTaskText.length >= 1 && e.key === 'Enter') || (newTaskText.length >= 1 && e.type === 'blur')) {\r\n            const { updateTask } = this.props;\r\n\r\n            updateTask(id, newTaskText)\r\n        \r\n            this.setState({\r\n                taskText: '',\r\n                editMode: !this.state.editMode\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { text, isCompleted, id, deleteTask, completeTask } = this.props;\r\n\r\n        let displayElement = '';\r\n        if (this.state.editMode) {\r\n            displayElement = \r\n            <input autoFocus type='text' className='task-text' defaultValue={text} onBlur={(e)=>this.updateTask(id,e)} onKeyPress={(e)=>this.updateTask(id,e)} />\r\n        } else {\r\n            displayElement = <span className={isCompleted ? 'task-completed task-text' : 'task-text'} onClick={() => completeTask(id)} > {text}</span>\r\n        }\r\n\r\n        return (\r\n            <li className={isCompleted ? 'completed todo-task' : 'todo-task'} onDoubleClick={this.changeEditMode} >\r\n                <input className='check-task' type='checkbox' onClick={() => completeTask(id)} />\r\n                {displayElement}\r\n                {!this.state.editMode && <span className='edit-task' onClick={this.changeEditMode}>Edit</span>}\r\n                <div className='close-task' onClick={() => deleteTask(id)}><span>&times;</span></div>\r\n            </li>\r\n        )\r\n    }\r\n};\r\n\r\nexport default connect(({ tasks }) => ({ tasks}), { updateTask })(ToDoItem);","import React from 'react';\r\nimport styles from './TodoList.module.css';\r\n\r\nimport ToDoItem from '../TodoItem/TodoItem';\r\n\r\nconst ToDoList = ({ tasks, deleteTask, completeTask }) => {\r\n   return <ul className={styles.todoList}>\r\n       { tasks.map(({id, text, isCompleted})=>(\r\n           <ToDoItem deleteTask={deleteTask} completeTask={completeTask} id={id} key={id + text} text={text} isCompleted={isCompleted} />\r\n       ))}\r\n   </ul>\r\n};\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport styles from './TodoFooter.module.css';\r\n\r\nconst FILTERS_BTN = [\r\n    { id: 'all', text: 'All' },\r\n    { id: 'active', text: 'Active' },\r\n    { id: 'completed', text: 'Completed' }\r\n]\r\n\r\nconst Footer = ({ activeFilter, changeFilter }) => (\r\n    <div className={styles.header}>\r\n        <div className={styles.btnGroup}>\r\n            {FILTERS_BTN.map(({text, id}) => {\r\n                return <button \r\n                onClick={()=>{changeFilter(id)}}\r\n                key={id}\r\n                className={ id === activeFilter ? styles.filterBtn + ' ' + styles.active : styles.filterBtn}\r\n                >{text}</button>\r\n            })}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport styles from './TodoHeader.module.css';\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        checked: false\r\n    }\r\n\r\n    handleCheckAll = () => {\r\n        const { checkAllTasks, uncheckAllTasks } = this.props;\r\n        this.setState({\r\n            checked: !this.state.checked\r\n        })\r\n        this.state.checked ? uncheckAllTasks.call() : checkAllTasks.call()\r\n    }\r\n\r\n    render() {\r\n        const { amount, all_tasks, deleteCompleted } = this.props;\r\n\r\n        return (\r\n            <div className={styles.header}>\r\n                <div className={styles.info}>\r\n                    <span className={styles.allTasks}>All: {all_tasks}</span>\r\n                    <span className={styles.activeTasks}>{all_tasks - amount}</span>\r\n                    <span className={styles.completedTasks}>{amount}</span>\r\n                </div>\r\n                <button className={styles.clearCompleted} onClick={this.handleCheckAll}>Check all</button>\r\n                <button className={styles.clearCompleted} onClick={deleteCompleted}>Clear</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\n\nimport ToDoInput from './TodoInput/TodoInput';\nimport ToDoList from './TodoList/TodoList';\nimport Footer from './TodoFooter/TodoFooter.jsx';\nimport Header from './TodoHeader/TodoHeader.jsx';\nimport BackBtn from '../../common/BackBtn/BackBtn';\n\nimport { connect } from 'react-redux';\nimport { addTask, deleteTask, completeTask, deleteCompleted, checkAllTasks, uncheckAllTasks } from '../../../store/reducers/tasks';\nimport { changeFilter } from '../../../store/reducers/filters';\n\nimport styles from './Todo.module.css';\n\nclass ToDo extends Component {\n    state = {\n        taskText: ''\n    }\n\n    handleInputChange = ({ target: { value } }) => {\n        this.setState({\n            taskText: value\n        })\n    }\n\n    addTask = ({ key }) => {\n        const { taskText } = this.state;\n\n        if (taskText.length >= 1 && key === 'Enter') {\n            const { addTask } = this.props;\n\n            addTask((new Date()).getTime(), taskText, false);\n\n            this.setState({\n                taskText: '',\n            })\n        }\n    }\n\n    filterTasks = (tasks, activeFilter) => {\n        switch (activeFilter) {\n            case 'active': return tasks.filter((task) => !task.isCompleted)\n            case 'completed': return tasks.filter((task) => task.isCompleted)\n\n            default: return tasks;\n        }\n    }\n\n    getCompletedTasksCounter = tasks => tasks.filter(task => task.isCompleted).length;\n\n    render() {\n        const { taskText } = this.state;\n        const { tasks, deleteTask, completeTask, changeFilter, filter, deleteCompleted, checkAllTasks, uncheckAllTasks } = this.props;\n        const filteredTasks = this.filterTasks(tasks, filter);\n        const taskCounter = this.getCompletedTasksCounter(tasks);\n\n        return <div className={styles.todoBlock}>\n            <div className={styles.todoWrapper}>\n                <ToDoInput onKeyPress={this.addTask} onChange={this.handleInputChange} value={taskText} />\n                <Header amount={taskCounter} all_tasks={tasks.length} deleteCompleted={deleteCompleted} checkAllTasks={checkAllTasks} uncheckAllTasks={uncheckAllTasks} />\n                <ToDoList tasks={filteredTasks} deleteTask={deleteTask} completeTask={completeTask} />\n                <Footer activeFilter={filter} changeFilter={changeFilter} />\n            </div>\n\n            <BackBtn />\n        </div>\n    }\n}\n\nexport default connect(({ tasks, filter }) => ({\n    tasks,\n    filter\n}), { addTask, deleteTask, completeTask, changeFilter, deleteCompleted, checkAllTasks, uncheckAllTasks })(ToDo);"],"sourceRoot":""}